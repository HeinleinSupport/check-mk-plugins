--- smart	2016-04-22 15:50:44.474549031 +0200
+++ smart.new	2016-04-22 15:41:00.376597130 +0200
@@ -26,7 +26,7 @@
 
 
 
-# This will be called on LSI based raidcontrollers and accesses
+# This will be called on LSI/Megaraid raidcontrollers and accesses
 # the SMART data of SATA disks attached to a SAS Raid HBA via
 # SCSI protocol interface.
 megaraid_info()
@@ -73,27 +73,68 @@
 }
 
 
+function get_3ware_smart_data () {
+	
+	      disk_index=$1
+	controller_index=$2
+	 controller_name=$3
+	       disk_type=$4
+	      disk_model=$5
+	     disk_serial=$6
+
+	 smartctl -A -d 3ware,$disk_index /dev/tw?$controller_index | grep Always \
+                                                | egrep -v '^190(.*)Temperature(.*)' | sed "s|^|3ware/$controller_name/p$disk_index $disk_type ${disk_model}_${disk_serial} |"
+
+}
+
+# This will be called on LSI/AMCC-3ware raidcontrollers and accesses
+# the SMART data of SATA disks attached to a SAS Raid HBA 
+
+function lsi_info () {
+
+	all_controllers=$(tw_cli show|grep -E '^c'|cut -c1-3)
+	all_controllers="${all_controllers% }"
+	c_num=0
+	for controller in $all_controllers;do
+		all_disks=$(tw_cli /$controller show | grep -E '^p' | awk '{print $1,$6 }' )
+		set $all_disks
+		while [ -n "$1" ]; do
+			disk=${1:1}
+			shift
+			type=$1
+			shift
+
+			TW_DATA="$(tw_cli /$controller/p$disk show model serial)"
+			 SERIAL=$(echo "$TW_DATA" | grep Serial | cut -d= -f2)
+			 SERIAL="${SERIAL# }"
+			  MODEL=$(echo "$TW_DATA" | grep Model | cut -d= -f2 )
+			  MODEL="${MODEL# }"
+			  MODEL="${MODEL/ /_}"
+
+			# SMART is only supported for SATA, not SAS
+			# See: http://www.gtkdb.de/index_33_1278.html
+			if [ "$type" = "SAS" ] ;then
+				echo >&2 "$MODEL/$SERIAL Disk type is SAS. tw_cli does not support reporting smart data of SAS-devices"
+				continue
+			else
+				if [ "$type" = "SATA" ] ; then
+					get_3ware_smart_data $disk $c_num $controller $type $MODEL $SERIAL
+				
+				# Some tw_cli version dont show type SATA in output, one could check if smart data blob is existent in tw_cli /controller/disk show all
+				# The smart data blob is not always here as well (e. g. with 3ware 8006 LP) so I decided to just try. Maybe smartctl output is there 
+				# maybe not. That should not hurt
+				else 
+					get_3ware_smart_data $disk $c_num $controller "UNKNOWN" $MODEL $SERIAL
+				fi
+			fi
+		done
+	((c_num=$c_num+1))
+	done
+}
+
+
 # Only handle always updated values, add device path and vendor/model
 if which smartctl > /dev/null 2>&1 ; then
-    #
-    # if the 3ware-utility is found
-    # get the serials for all disks on the controller
-    #
-    if which tw_cli > /dev/null 2>&1 ; then
-	# support for only one controller at the moment
-	TWAC=$(tw_cli show | awk 'NR < 4 { next } { print $1 }' | head -n 1)
-
-       # - add a trailing zero to handle case of unused slot
-       #   trailing zeros are part of the device links in /dev/disk/by-id/... anyway
-       # - only the last 9 chars seem to be relevant
-       # (hopefully all this doesn't change with new kernels...)
-	eval `tw_cli /$TWAC show drivestatus | grep -E '^p[0-9]' | awk '{print $1 " " $7 "0"}' | while read twaminor serial ; do
-	    twaminor=${twaminor#p}
-	    serial=${serial:(-9)}
-	    serial=AMCC_${serial}00000000000
-	    echo "$serial=$twaminor"
-        done`
-    fi
 
     echo '<<<smart>>>'
     SEEN=
@@ -130,16 +171,8 @@
         DNAME=${DNAME#/dev/disk/by-id/ata-}
         # 2012-01-25 Stefan Kaerst CDJ - special option in case vendor is AMCC
 	CMD=
-        if [ "$VEND" == "AMCC" -a -n "$TWAC" ]; then
-	    DNAME=${DNAME#1}
-	    [ -z "${!DNAME}" ] && continue
-	    CMD="smartctl -d 3ware,${!DNAME} -v 9,raw48 -A /dev/twa0"
-	    # create nice device name including model
-	    MODEL=$(tw_cli /$TWAC/p${!DNAME} show model | head -n 1 | awk -F= '{ print $2 }')
-	    MODEL=${MODEL## }
-	    MODEL=${MODEL// /-}
-	    DNAME=${DNAME#AMCC_}
-	    DNAME="AMCC_${MODEL}_${DNAME%000000000000}"
+        if [ "$VEND" == "AMCC" -o "$VEND" == "LSI" ]; then
+		continue
         elif [ "$VEND" != "ATA" ] ; then
 	    TEMP=
 	    # create temperature output as expected by checks/smart
@@ -173,5 +206,9 @@
         megaraid_info "$MegaCli_bin"
     fi
 
+    # Call LSI submodule if conditions are met
+    if type tw_cli > /dev/null && [ -c /dev/tw?0 ] ; then
+        lsi_info
+    fi
 fi
 
